// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: marketcenter/v1/marketcenter.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MarketCenter_CurrencyList_FullMethodName = "/marketcenter.v1.MarketCenter/CurrencyList"
)

// MarketCenterClient is the client API for MarketCenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketCenterClient interface {
	CurrencyList(ctx context.Context, in *CurrencyListRequest, opts ...grpc.CallOption) (*CurrencyListResponse, error)
}

type marketCenterClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketCenterClient(cc grpc.ClientConnInterface) MarketCenterClient {
	return &marketCenterClient{cc}
}

func (c *marketCenterClient) CurrencyList(ctx context.Context, in *CurrencyListRequest, opts ...grpc.CallOption) (*CurrencyListResponse, error) {
	out := new(CurrencyListResponse)
	err := c.cc.Invoke(ctx, MarketCenter_CurrencyList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketCenterServer is the server API for MarketCenter service.
// All implementations must embed UnimplementedMarketCenterServer
// for forward compatibility
type MarketCenterServer interface {
	CurrencyList(context.Context, *CurrencyListRequest) (*CurrencyListResponse, error)
	mustEmbedUnimplementedMarketCenterServer()
}

// UnimplementedMarketCenterServer must be embedded to have forward compatible implementations.
type UnimplementedMarketCenterServer struct {
}

func (UnimplementedMarketCenterServer) CurrencyList(context.Context, *CurrencyListRequest) (*CurrencyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrencyList not implemented")
}
func (UnimplementedMarketCenterServer) mustEmbedUnimplementedMarketCenterServer() {}

// UnsafeMarketCenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketCenterServer will
// result in compilation errors.
type UnsafeMarketCenterServer interface {
	mustEmbedUnimplementedMarketCenterServer()
}

func RegisterMarketCenterServer(s grpc.ServiceRegistrar, srv MarketCenterServer) {
	s.RegisterService(&MarketCenter_ServiceDesc, srv)
}

func _MarketCenter_CurrencyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrencyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketCenterServer).CurrencyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketCenter_CurrencyList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketCenterServer).CurrencyList(ctx, req.(*CurrencyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MarketCenter_ServiceDesc is the grpc.ServiceDesc for MarketCenter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MarketCenter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "marketcenter.v1.MarketCenter",
	HandlerType: (*MarketCenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CurrencyList",
			Handler:    _MarketCenter_CurrencyList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "marketcenter/v1/marketcenter.proto",
}
