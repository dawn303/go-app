// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.25.3
// source: markets/v1/markets.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Markets_TokenList_FullMethodName = "/markets.v1.Markets/TokenList"
)

// MarketsClient is the client API for Markets service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketsClient interface {
	TokenList(ctx context.Context, in *TokenListRequest, opts ...grpc.CallOption) (*TokenListResponse, error)
}

type marketsClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketsClient(cc grpc.ClientConnInterface) MarketsClient {
	return &marketsClient{cc}
}

func (c *marketsClient) TokenList(ctx context.Context, in *TokenListRequest, opts ...grpc.CallOption) (*TokenListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TokenListResponse)
	err := c.cc.Invoke(ctx, Markets_TokenList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketsServer is the server API for Markets service.
// All implementations must embed UnimplementedMarketsServer
// for forward compatibility
type MarketsServer interface {
	TokenList(context.Context, *TokenListRequest) (*TokenListResponse, error)
	mustEmbedUnimplementedMarketsServer()
}

// UnimplementedMarketsServer must be embedded to have forward compatible implementations.
type UnimplementedMarketsServer struct {
}

func (UnimplementedMarketsServer) TokenList(context.Context, *TokenListRequest) (*TokenListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenList not implemented")
}
func (UnimplementedMarketsServer) mustEmbedUnimplementedMarketsServer() {}

// UnsafeMarketsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketsServer will
// result in compilation errors.
type UnsafeMarketsServer interface {
	mustEmbedUnimplementedMarketsServer()
}

func RegisterMarketsServer(s grpc.ServiceRegistrar, srv MarketsServer) {
	s.RegisterService(&Markets_ServiceDesc, srv)
}

func _Markets_TokenList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketsServer).TokenList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Markets_TokenList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketsServer).TokenList(ctx, req.(*TokenListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Markets_ServiceDesc is the grpc.ServiceDesc for Markets service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Markets_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "markets.v1.Markets",
	HandlerType: (*MarketsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TokenList",
			Handler:    _Markets_TokenList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "markets/v1/markets.proto",
}
